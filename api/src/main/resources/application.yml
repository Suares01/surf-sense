okta:
  oauth2:
    audience: ${AUTH0_AUDIENCE}
    issuer: ${AUTH0_ISSUER}

bucket4j:
  enabled: true
  cache-to-use: redis-jedis
  filters:
  - cache-name: rate-limiter
    url: .*
    filter-order: 100
    rate-limits:
    - execute-condition: "@authorizationService.isAuthenticated()"
      cache-key: "@authorizationService.getUserId()"
      bandwidths:
      - capacity: 10
        time: 1
        unit: minutes
    - execute-condition: "@authorizationService.isUnauthenticated()"
      cache-key: "getRemoteAddr()"
      bandwidths:
      - capacity: 10
        time: 1
        unit: minutes

management:
  httpexchanges:
    recording:
      enabled: true
      include:
      - request-headers
      - response-headers
  endpoints:
    web:
      exposure:
        include:
        - httpexchanges
        - health
        - info
        - prometheus

spring:

  cloud:
    openfeign:
      okhttp:
        enabled: true
      client:
        config:
          auth0Client:
            url: https://${api-env.auth0.domain}

  application:
    name: api

  main:
    allow-bean-definition-overriding: true

  threads:
    virtual:
      enabled: true

  flyway:
    enabled: true
    locations: classpath:db/migration
    url: ${DATASOURCE_URL}
    password: ${DATASOURCE_PASSWORD}
    user: ${DATASOURCE_USERNAME}
    baseline-on-migrate: true

  jpa:
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        '[format_sql]': true
    hibernate:
      ddl-auto: none

  datasource:
    password: ${DATASOURCE_PASSWORD}
    driver-class-name: org.postgresql.Driver
    username: ${DATASOURCE_USERNAME}
    url: ${DATASOURCE_URL}

  data:
    redis:
      password: ${CACHE_PASSWORD}
      port: ${CACHE_PORT}
      host: ${CACHE_HOST}

  cache:
    type: redis

server:
  port: ${PORT}

api-env:
  auth0:
    client_id: ${AUTH0_CLIENT_ID}
    client_secret: ${AUTH0_CLIENT_SECRET}
    audience: ${AUTH0_AUDIENCE}
    domain: ${AUTH0_DOMAIN}
